{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/Burger/UI/Input/Input.js","components/Burger/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updatedObject","_this","Object","C_Users_hp_Downloads_React_Burger_Self_order_burger_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementArray","key","push","id","config","form","map","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_components_Burger_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","shouldValidate","invalid","changed","loading","_components_Burger_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_10__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_11__","to","className","classes","onSubmit","_components_Burger_UI_Button_Button__WEBPACK_IMPORTED_MODULE_8__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","isSignUp","actions","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","inputClasses","InputElement","validationError","Invalid","ValidationError","inputElement","assign","join","onChange","options","option","vale","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.bb2273ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__20fA0\"};","import React, { Component } from \"react\";\r\nimport Input from \"../../components/Burger/UI/Input/Input\";\r\nimport Button from \"../../components/Burger/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport Spinner from \"../../components/Burger/UI/Spinner/Spinner\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { updatedObject, checkValidity } from \"../../shared/utilityFunction\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your Email Address\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    isSignup: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    // const updatedControls = {\r\n    //   ...this.state.controls,\r\n    //   [controlName]: {\r\n    //     ...this.state.controls[controlName],\r\n    //     value: event.target.value,\r\n    //     valid: this.checkValidity(\r\n    //       event.target.value,\r\n    //       this.state.controls[controlName].validation\r\n    //     ),\r\n    //     touched: true\r\n    //   }\r\n    // };\r\n\r\n    const updatedControls = updatedObject(this.state.controls, {\r\n      [controlName]: updatedObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true\r\n      })\r\n    });\r\n\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      });\r\n    }\r\n\r\n    let form = formElementArray.map(formElement => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        shouldValidate={formElement.config.validation}\r\n        invalid={!formElement.config.valid}\r\n        touched={formElement.config.touched}\r\n        changed={event => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">Submit</Button>\r\n        </form>\r\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\r\n          SWITCH TO {this.state.isSignup ? \"SIGN IN\" : \"SIGN UP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Auth);\r\n","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = props => {\r\n  const inputClasses = [classes.InputElement];\r\n  let validationError = null;\r\n\r\n  if (props.invalid && props.touched && props.shouldValidate) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = (\r\n      <p className={classes.ValidationError}>\r\n        {props.elementConfig.placeholder} is not valid, try again!\r\n        {/* {props.elementConfig.placeholder} \"{props.value}\" is not valid, try\r\n        again! */}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  let inputElement = null;\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          onChange={props.changed}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          onChange={props.changed}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map(option => (\r\n            <option key={option.value} value={option.vale}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          onChange={props.changed}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1Xa5a\",\"Label\":\"Input_Label__3ZRo5\",\"InputElement\":\"Input_InputElement__3KF3P\",\"Invalid\":\"Input_Invalid__30yKx\",\"ValidationError\":\"Input_ValidationError__2mAPQ\"};"],"sourceRoot":""}